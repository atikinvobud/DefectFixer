// <auto-generated />
using System;
using BackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Entities.AplicationsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MongoPictureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DefectId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.DefectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentEngeneerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeadlinaDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CurrentEngeneerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.HistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefectId")
                        .HasColumnType("integer");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.PriorityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ProjectEmployersEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectEmployers");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MongoDocumentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.UserInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("userInfos");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.AplicationsEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.DefectEntity", "defect")
                        .WithMany("aplicationsEntities")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.UserEntity", "user")
                        .WithMany("aplicationsEntities")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("defect");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.CommentEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.UserEntity", "userEntity")
                        .WithMany("commentEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.DefectEntity", "defectEntity")
                        .WithMany("commentEntities")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("defectEntity");

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.DefectEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.UserEntity", "author")
                        .WithMany("AuthorDefects")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.UserEntity", "engeneer")
                        .WithMany("ExecutorDefects")
                        .HasForeignKey("CurrentEngeneerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.PriorityEntity", "priorityEntity")
                        .WithMany("defectEntities")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.ProjectEntity", "projectEntity")
                        .WithMany("defectEntities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.StatusEntity", "statusEntity")
                        .WithMany("defectEntities")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("engeneer");

                    b.Navigation("priorityEntity");

                    b.Navigation("projectEntity");

                    b.Navigation("statusEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.HistoryEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.DefectEntity", "defectEntity")
                        .WithMany("historyEntities")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.StatusEntity", "statusEntity")
                        .WithMany("historyEntities")
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.UserEntity", "userEntity")
                        .WithMany("historyEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("defectEntity");

                    b.Navigation("statusEntity");

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ProjectEmployersEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.ProjectEntity", "projectEntity")
                        .WithMany("projectEmployersEntities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Entities.UserEntity", "userEntity")
                        .WithMany("projectEmployersEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("projectEntity");

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ReportEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.ProjectEntity", "projectEntity")
                        .WithMany("reportEntities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("projectEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.RoleEntity", "roleEntity")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleEntity");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.UserInfoEntity", b =>
                {
                    b.HasOne("BackEnd.Models.Entities.UserEntity", "user")
                        .WithOne("UserInfoEntity")
                        .HasForeignKey("BackEnd.Models.Entities.UserInfoEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.DefectEntity", b =>
                {
                    b.Navigation("aplicationsEntities");

                    b.Navigation("commentEntities");

                    b.Navigation("historyEntities");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.PriorityEntity", b =>
                {
                    b.Navigation("defectEntities");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.ProjectEntity", b =>
                {
                    b.Navigation("defectEntities");

                    b.Navigation("projectEmployersEntities");

                    b.Navigation("reportEntities");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.StatusEntity", b =>
                {
                    b.Navigation("defectEntities");

                    b.Navigation("historyEntities");
                });

            modelBuilder.Entity("BackEnd.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("AuthorDefects");

                    b.Navigation("ExecutorDefects");

                    b.Navigation("UserInfoEntity");

                    b.Navigation("aplicationsEntities");

                    b.Navigation("commentEntities");

                    b.Navigation("historyEntities");

                    b.Navigation("projectEmployersEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
